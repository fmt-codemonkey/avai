"use client";

import { useState } from "react";
import { cn } from "@/lib/utils";
import { 
  ChevronDown,
  ChevronRight,
  ExternalLink,
  Copy,
  Check,
  FileCode,
  MapPin,
  Clock,
  User,
  AlertTriangle,
  Info,
  Lightbulb
} from "lucide-react";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { SecurityBadge } from "./SecurityBadge";

interface VulnerabilityLocation {
  file: string;
  line: number;
  column?: number;
  function?: string;
}

interface VulnerabilityFix {
  title: string;
  description: string;
  code?: string;
  difficulty: "easy" | "medium" | "hard";
  estimatedTime: string;
}

interface VulnerabilityProps {
  id: string;
  title: string;
  description: string;
  severity: "critical" | "high" | "medium" | "low";
  category: string;
  cwe?: string;
  cvss?: number;
  location: VulnerabilityLocation;
  codeSnippet?: string;
  impact: string;
  recommendation: string;
  fixes?: VulnerabilityFix[];
  references?: { title: string; url: string }[];
  discoveredAt: string;
  status: "open" | "in-progress" | "fixed" | "accepted-risk";
  assignee?: string;
  className?: string;
}

export function VulnerabilityCard({
  id,
  title,
  description,
  severity,
  category,
  cwe,
  cvss,
  location,
  codeSnippet,
  impact,
  recommendation,
  fixes = [],
  references = [],
  discoveredAt,
  status,
  assignee,
  className,
}: VulnerabilityProps) {
  const [isExpanded, setIsExpanded] = useState(false);
  const [copiedCode, setCopiedCode] = useState(false);

  const handleCopyCode = async (code: string) => {
    try {
      await navigator.clipboard.writeText(code);
      setCopiedCode(true);
      setTimeout(() => setCopiedCode(false), 2000);
    } catch (err) {
      console.error("Failed to copy code:", err);
    }
  };

  const getStatusColor = (status: VulnerabilityProps["status"]) => {
    switch (status) {
      case "open":
        return "text-critical";
      case "in-progress":
        return "text-medium";
      case "fixed":
        return "text-secure";
      case "accepted-risk":
        return "text-muted-foreground";
    }
  };

  const getStatusBadge = (status: VulnerabilityProps["status"]) => {
    switch (status) {
      case "open":
        return <Badge variant="destructive">Open</Badge>;
      case "in-progress":
        return <Badge className="bg-medium text-medium-foreground">In Progress</Badge>;
      case "fixed":
        return <Badge className="bg-secure text-secure-foreground">Fixed</Badge>;
      case "accepted-risk":
        return <Badge variant="outline">Accepted Risk</Badge>;
    }
  };

  return (
    <Card className={cn("w-full", className)}>
      <CardHeader className="pb-3">
        {/* Header with title and severity */}
        <div className="flex items-start justify-between gap-4">
          <div className="flex-1 min-w-0">
            <div className="flex items-start gap-3 mb-2">
              <SecurityBadge severity={severity} />
              <div className="flex-1">
                <h3 className="font-semibold text-base leading-tight">{title}</h3>
                <p className="text-sm text-muted-foreground mt-1">{description}</p>
              </div>
            </div>
            
            {/* Metadata row */}
            <div className="flex flex-wrap items-center gap-4 text-xs text-muted-foreground">
              <span className="flex items-center gap-1">
                <FileCode className="h-3 w-3" />
                {category}
              </span>
              {cwe && (
                <span className="flex items-center gap-1">
                  <Info className="h-3 w-3" />
                  CWE-{cwe}
                </span>
              )}
              {cvss && (
                <span className="flex items-center gap-1">
                  <AlertTriangle className="h-3 w-3" />
                  CVSS: {cvss.toFixed(1)}
                </span>
              )}
              <span className="flex items-center gap-1">
                <Clock className="h-3 w-3" />
                {discoveredAt}
              </span>
            </div>
          </div>

          <div className="flex flex-col items-end gap-2">
            {getStatusBadge(status)}
            {assignee && (
              <div className="flex items-center gap-1 text-xs text-muted-foreground">
                <User className="h-3 w-3" />
                {assignee}
              </div>
            )}
          </div>
        </div>

        {/* Location */}
        <div className="flex items-center gap-2 p-2 bg-muted/50 rounded-md">
          <MapPin className="h-4 w-4 text-muted-foreground" />
          <code className="text-sm font-mono">
            {location.file}:{location.line}
            {location.column && `:${location.column}`}
            {location.function && ` in ${location.function}()`}
          </code>
        </div>

        {/* Expand/Collapse button */}
        <Button
          variant="ghost"
          size="sm"
          className="w-full justify-center gap-2 mt-2"
          onClick={() => setIsExpanded(!isExpanded)}
        >
          {isExpanded ? (
            <>
              <ChevronDown className="h-4 w-4" />
              Show Less
            </>
          ) : (
            <>
              <ChevronRight className="h-4 w-4" />
              Show Details
            </>
          )}
        </Button>
      </CardHeader>

      {isExpanded && (
        <CardContent className="pt-0 space-y-6">
          {/* Code Snippet */}
          {codeSnippet && (
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <h4 className="font-medium text-sm">Vulnerable Code</h4>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleCopyCode(codeSnippet)}
                  className="gap-2"
                >
                  {copiedCode ? (
                    <>
                      <Check className="h-3 w-3" />
                      Copied
                    </>
                  ) : (
                    <>
                      <Copy className="h-3 w-3" />
                      Copy
                    </>
                  )}
                </Button>
              </div>
              <pre className="bg-muted p-3 rounded-md text-sm font-mono overflow-x-auto border">
                <code>{codeSnippet}</code>
              </pre>
            </div>
          )}

          <Separator />

          {/* Impact and Recommendation */}
          <div className="grid md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <h4 className="font-medium text-sm flex items-center gap-2">
                <AlertTriangle className="h-4 w-4 text-critical" />
                Impact
              </h4>
              <p className="text-sm text-muted-foreground">{impact}</p>
            </div>

            <div className="space-y-2">
              <h4 className="font-medium text-sm flex items-center gap-2">
                <Lightbulb className="h-4 w-4 text-secure" />
                Recommendation
              </h4>
              <p className="text-sm text-muted-foreground">{recommendation}</p>
            </div>
          </div>

          {/* Fixes */}
          {fixes.length > 0 && (
            <>
              <Separator />
              <div className="space-y-3">
                <h4 className="font-medium text-sm">Suggested Fixes</h4>
                {fixes.map((fix, index) => (
                  <div key={index} className="border border-border rounded-md p-3 space-y-2">
                    <div className="flex items-center justify-between">
                      <h5 className="font-medium text-sm">{fix.title}</h5>
                      <div className="flex items-center gap-2">
                        <Badge variant="outline" className="text-xs">
                          {fix.difficulty}
                        </Badge>
                        <span className="text-xs text-muted-foreground">
                          {fix.estimatedTime}
                        </span>
                      </div>
                    </div>
                    <p className="text-sm text-muted-foreground">{fix.description}</p>
                    {fix.code && (
                      <pre className="bg-muted/50 p-2 rounded text-xs font-mono overflow-x-auto">
                        <code>{fix.code}</code>
                      </pre>
                    )}
                  </div>
                ))}
              </div>
            </>
          )}

          {/* References */}
          {references.length > 0 && (
            <>
              <Separator />
              <div className="space-y-2">
                <h4 className="font-medium text-sm">References</h4>
                <div className="space-y-1">
                  {references.map((ref, index) => (
                    <a
                      key={index}
                      href={ref.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center gap-2 text-sm text-primary hover:underline"
                    >
                      <ExternalLink className="h-3 w-3" />
                      {ref.title}
                    </a>
                  ))}
                </div>
              </div>
            </>
          )}

          {/* Actions */}
          <Separator />
          <div className="flex flex-wrap gap-2">
            <Button size="sm" variant="outline">
              Mark as Fixed
            </Button>
            <Button size="sm" variant="outline">
              Assign to Team
            </Button>
            <Button size="sm" variant="outline">
              Accept Risk
            </Button>
            <Button size="sm" variant="ghost">
              Export
            </Button>
          </div>
        </CardContent>
      )}
    </Card>
  );
}
